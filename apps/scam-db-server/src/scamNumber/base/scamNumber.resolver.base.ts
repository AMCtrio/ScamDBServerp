/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { ScamNumber } from "./ScamNumber";
import { ScamNumberCountArgs } from "./ScamNumberCountArgs";
import { ScamNumberFindManyArgs } from "./ScamNumberFindManyArgs";
import { ScamNumberFindUniqueArgs } from "./ScamNumberFindUniqueArgs";
import { CreateScamNumberArgs } from "./CreateScamNumberArgs";
import { UpdateScamNumberArgs } from "./UpdateScamNumberArgs";
import { DeleteScamNumberArgs } from "./DeleteScamNumberArgs";
import { ReportFindManyArgs } from "../../report/base/ReportFindManyArgs";
import { Report } from "../../report/base/Report";
import { ScamNumberService } from "../scamNumber.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => ScamNumber)
export class ScamNumberResolverBase {
  constructor(
    protected readonly service: ScamNumberService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ScamNumber",
    action: "read",
    possession: "any",
  })
  async _scamNumbersMeta(
    @graphql.Args() args: ScamNumberCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ScamNumber])
  @nestAccessControl.UseRoles({
    resource: "ScamNumber",
    action: "read",
    possession: "any",
  })
  async scamNumbers(
    @graphql.Args() args: ScamNumberFindManyArgs
  ): Promise<ScamNumber[]> {
    return this.service.scamNumbers(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ScamNumber, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ScamNumber",
    action: "read",
    possession: "own",
  })
  async scamNumber(
    @graphql.Args() args: ScamNumberFindUniqueArgs
  ): Promise<ScamNumber | null> {
    const result = await this.service.scamNumber(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ScamNumber)
  @nestAccessControl.UseRoles({
    resource: "ScamNumber",
    action: "create",
    possession: "any",
  })
  async createScamNumber(
    @graphql.Args() args: CreateScamNumberArgs
  ): Promise<ScamNumber> {
    return await this.service.createScamNumber({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ScamNumber)
  @nestAccessControl.UseRoles({
    resource: "ScamNumber",
    action: "update",
    possession: "any",
  })
  async updateScamNumber(
    @graphql.Args() args: UpdateScamNumberArgs
  ): Promise<ScamNumber | null> {
    try {
      return await this.service.updateScamNumber({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ScamNumber)
  @nestAccessControl.UseRoles({
    resource: "ScamNumber",
    action: "delete",
    possession: "any",
  })
  async deleteScamNumber(
    @graphql.Args() args: DeleteScamNumberArgs
  ): Promise<ScamNumber | null> {
    try {
      return await this.service.deleteScamNumber(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Report], { name: "reports" })
  @nestAccessControl.UseRoles({
    resource: "Report",
    action: "read",
    possession: "any",
  })
  async findReports(
    @graphql.Parent() parent: ScamNumber,
    @graphql.Args() args: ReportFindManyArgs
  ): Promise<Report[]> {
    const results = await this.service.findReports(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
